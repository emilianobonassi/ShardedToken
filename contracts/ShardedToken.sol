pragma solidity ^0.5.0;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/ownership/Ownable.sol";
import "./Sharded.sol";
import "./IShardedToken.sol";


contract ShardedToken is IShardedToken, ShardedBase, Ownable {
    using SafeMath for uint256;

    uint256 public totalSupply;

    event Mint(address indexed to, uint256 amount);
    event Burn(address indexed who, uint256 amount);

    // solium-disable-next-line max-len
    constructor() public ShardedBase(hex"6080604052600080546001600160a01b031916331781556100276001600160e01b0361007a16565b600280546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061007e565b3390565b610a9a8061008d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063a9059cbb11610066578063a9059cbb14610213578063b69ef8a81461023f578063f11e547d14610247578063f2fde38b14610273576100ea565b8063715018a6146101e75780638da5cb5b146101ef5780638f32d59b146101f7576100ea565b806315155319116100c857806315155319146101635780633e5beab91461018057806342966c68146101a65780635001f3b5146101c3576100ea565b806301c6adc3146100ef5780630624c9c41461011d578063095ea7b314610137575b600080fd5b61011b6004803603604081101561010557600080fd5b506001600160a01b038135169060200135610299565b005b6101256102d7565b60408051918252519081900360200190f35b61011b6004803603604081101561014d57600080fd5b506001600160a01b0381351690602001356102dd565b61011b6004803603602081101561017957600080fd5b503561036c565b6101256004803603602081101561019657600080fd5b50356001600160a01b03166103dd565b61011b600480360360208110156101bc57600080fd5b50356103f8565b6101cb6104f3565b604080516001600160a01b039092168252519081900360200190f35b61011b610502565b6101cb610593565b6101ff6105a2565b604080519115158252519081900360200190f35b61011b6004803603604081101561022957600080fd5b506001600160a01b0381351690602001356105c8565b610125610619565b61011b6004803603604081101561025d57600080fd5b506001600160a01b03813516906020013561061f565b61011b6004803603602081101561028957600080fd5b50356001600160a01b031661068a565b336000908152600460205260409020546102b9908263ffffffff6106dd16565b336000908152600460205260409020556102d38282610726565b5050565b60015481565b6102e56105a2565b610324576040805162461bcd60e51b81526020600482018190526024820152600080516020610a46833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600460205260409020541580610347575080155b61035057600080fd5b6001600160a01b03909116600090815260046020526040902055565b6000546001600160a01b0316331461038357600080fd5b600154156103d8576040805162461bcd60e51b815260206004820152601960248201527f536861726465644578743a206163636573732064656e69656400000000000000604482015290519081900360640190fd5b600155565b6001600160a01b031660009081526004602052604090205490565b6104006105a2565b61043f576040805162461bcd60e51b81526020600482018190526024820152600080516020610a46833981519152604482015290519081900360640190fd5b61046c81604051806060016040528060298152602001610a1d60299139600354919063ffffffff6107fc16565b6003556000546001600160a01b0316638b1897d4610488610593565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031681565b61050a6105a2565b610549576040805162461bcd60e51b81526020600482018190526024820152600080516020610a46833981519152604482015290519081900360640190fd5b6002546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600280546001600160a01b0319169055565b6002546001600160a01b031690565b6002546000906001600160a01b03166105b9610893565b6001600160a01b031614905090565b6105d06105a2565b61060f576040805162461bcd60e51b81526020600482018190526024820152600080516020610a46833981519152604482015290519081900360640190fd5b6102d38282610726565b60035490565b60005482906001600160a01b03163314806106665750600154600054610651916001600160a01b038085169216610897565b6001600160a01b0316336001600160a01b0316145b61066f57600080fd5b600354610682908363ffffffff6108fb16565b600355505050565b6106926105a2565b6106d1576040805162461bcd60e51b81526020600482018190526024820152600080516020610a46833981519152604482015290519081900360640190fd5b6106da81610955565b50565b600061071f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107fc565b9392505050565b61075381604051806060016040528060298152602001610a1d60299139600354919063ffffffff6107fc16565b600355600154600080549091610776916001600160a01b03808716929116610897565b9050806001600160a01b031663f11e547d61078f610593565b846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156107df57600080fd5b505af11580156107f3573d6000803e3d6000fd5b50505050505050565b6000818484111561088b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610850578181015183820152602001610838565b50505050905090810190601f16801561087d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b3390565b604080516001600160f81b031960208083019190915260609390931b6bffffffffffffffffffffffff19166021820152603581019490945260558085019390935280518085039093018352607590930190925280519101206001600160a01b031690565b60008282018381101561071f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b03811661099a5760405162461bcd60e51b81526004018080602001828103825260268152602001806109f76026913960400191505060405180910390fd5b6002546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353686172646564546f6b656e457874656e73696f6e3a204e6f7420656e6f7567682062616c616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a265627a7a72315820def0087d7e56f87b3c76bbca2ec6b10a0d82ebf7b646742d386d8dbf7b004cf764736f6c63430005100032") {
    }

    function mint(address to, uint256 amount) public onlyOwner {
        totalSupply = totalSupply.add(amount);
        address ext = Create2Hash.computeAddress(bytes32(uint256(to)), extensionBytecodeHash, address(this));
        IShardedTokenExtension(ext).received(address(0), amount);
        emit Mint(to, amount);
    }

    function burned(address from, uint256 amount) public onlyExtensionOfUser(from) {
        totalSupply = totalSupply.sub(amount);
        emit Burn(from, amount);
    }

    function installExtension() public returns(address extension) {
        extension = super.installExtension();
        Ownable(extension).transferOwnership(msg.sender);
    }
}
